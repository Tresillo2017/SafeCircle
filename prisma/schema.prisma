generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String?            @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accountType         String             @default("user")
  familyCode          String?
  familyId            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  onboardingComplete  Boolean            @default(false)
  subscriptionPlan    String             @default("free")
  subscriptionStatus  String             @default("active")
  isBetaUser          Boolean            @default(false)
  aiSettings          AISettings?
  apiKeys             ApiKey[]
  betaFeatures        BetaFeature[]
  accounts            Account[]
  authenticators      Authenticator[]
  onboardingStatus    OnboardingStatus?
  sessions            Session[]
  family              Family?            @relation(fields: [familyId], references: [id], onDelete: SetNull)
  role                UserRole           @default(MEMBER)
  familyRole          UserRole           @default(MEMBER)
  sentInvitations     FamilyInvitation[] @relation("SentInvitations")
  receivedInvitations FamilyInvitation[] @relation("ReceivedInvitations")
  apiStats            UserApiStats[]

  @@index([familyId])
  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
  @@map("authenticators")
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  key        String    @unique
  keyPrefix  String
  userId     String
  createdAt  DateTime  @default(now())
  lastUsed   DateTime?
  usageCount Int       @default(0)
  enabled    Boolean   @default(true)
  user       User      @relation(fields: [userId], references: [id])
  usage      ApiUsage[]

  @@index([userId])
  @@index([key])
}

model OnboardingStatus {
  id        String  @id @default(cuid())
  completed Boolean @default(false)
  step      Int     @default(1)
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])

  @@map("onboarding_status")
}

model BetaFeature {
  id        String   @id @default(cuid())
  featureId String
  userId    String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, featureId])
  @@index([userId])
}

model AISettings {
  id           String   @id @default(cuid())
  userId       String   @unique
  modelVersion String   @default("deepseek")
  temperature  Float    @default(0.7)
  maxTokens    Int      @default(2048)
  safetyLevel  String   @default("balanced")
  streaming    Boolean  @default(true)
  timeout      Int      @default(30)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model FamilyInvitation {
  id         String   @id @default(cuid())
  email      String
  inviterId  String
  familyId   String
  familyCode String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  accepted   Boolean  @default(false)
  status     String   @default("PENDING") // PENDING, ACCEPTED, REJECTED

  inviter   User    @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  family    Family  @relation(fields: [familyId], references: [id], onDelete: Cascade)
  invitedId String?
  invited   User?   @relation("ReceivedInvitations", fields: [invitedId], references: [id])

  @@index([email])
  @@index([familyCode])
  @@index([inviterId])
  @@index([familyId])
  @@index([invitedId])
}

model Family {
  id          String             @id @default(cuid())
  name        String
  icon        String?
  code        String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  members     User[]
  settings    Json               @default("{\"notifications\":{\"familyAlerts\":true,\"memberActivity\":true},\"security\":{\"autoBlock\":true,\"parentApproval\":true}}")
  invitations FamilyInvitation[]

  @@map("families")
}

model ApiUsage {
  id        String   @id @default(cuid())
  apiKeyId  String
  month     DateTime
  count     Int      @default(0)
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@unique([apiKeyId, month])
  @@index([month])
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   // API key or user ID
  count     Int      @default(0)
  type      String   // 'web' or 'api'
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([key, type])
  @@index([expiresAt])
}

model UserApiStats {
  id        String   @id @default(cuid())
  userId    String
  month     DateTime
  count     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, month])
  @@index([month])
}
