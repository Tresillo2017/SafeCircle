generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accountType       String    @default("user")
  onboardingComplete Boolean  @default(false)
  familyCode        String?
  password      String?
  familyId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subscriptionPlan String @default("free")
  subscriptionStatus String @default("active")
  isBetaUser       Boolean @default(false)
  
  // Auth.js relations
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  
  // Custom relations
  apiKeys       ApiKey[]
  familyMembers User[]    @relation("FamilyMembers")
  family        User?     @relation("FamilyMembers", fields: [familyId], references: [id])
  onboardingStatus OnboardingStatus?
  betaFeatures     BetaFeature[]
  aiSettings     AISettings?

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  id                  String  @id @default(cuid())
  credentialID        String  @unique
  userId              String
  providerAccountId   String
  credentialPublicKey String
  counter             Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
  @@map("authenticators")
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique // This will store the hashed key
  keyPrefix   String    // Add this field
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  lastUsed    DateTime?
  usageLimit  Int       @default(1000)
  usageCount  Int       @default(0)
  enabled     Boolean   @default(true)

  @@index([userId])
  @@index([key])
}

model OnboardingStatus {
  id        String   @id @default(cuid())
  completed Boolean  @default(false)
  step      Int      @default(1)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("onboarding_status")
}

model BetaFeature {
  id          String   @id @default(cuid())
  featureId   String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@unique([userId, featureId])
  @@index([userId])
}

model AISettings {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  modelVersion    String    @default("deepseek")
  temperature     Float     @default(0.7)
  maxTokens       Int       @default(2048)
  safetyLevel     String    @default("balanced")
  streaming       Boolean   @default(true)
  timeout         Int       @default(30)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}
